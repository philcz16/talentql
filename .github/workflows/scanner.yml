name: Scanner

on:
  issues:
    types:
      - opened

jobs:
  scan:
    name: Scan container Images
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_URL: ${{ github.event.issue.html_url }}
      ISSUE_BODY: ${{ github.event.issue.body }}
    
    steps:
      - name: Init
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # TASK/TODO: 
      # Build this step in the workflow. Refer to the linked document in the README for more details
      # - name: TODO - Scan Vulnerabilities
      #   run: echo "Build this step in the workflow. Refer to the linked document in the README for more details"

      - name: Scan docker images from Github issue with trivy
        shell: bash
        run: |
          input=$(echo ${{ github.event.issue.body }} | tr -d '[]' | tr -s "," " ")
          array=($input)
          for image in ${array[@]}; do
          echo "------------ Scanning $image ----------------- /n"
          trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity "CRITICAL" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity "HIGH" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' $(echo $image) | tee -a scan.txt
          result=$( tail -n 1 scan.txt )
          if [[ "$check" == "$result" ]]
          then
          echo "$image,SAFE" >> result.txt
          else
          echo "$image,UNSAFE" >> result.txt
          
          fi
          done
      - name: Post comment on scan result
        id: comment
        run: |
          comment=$(jq -Rs '[ split("\n")[] | select(length > 0) 
          | split(",") | {image: .[0], status: .[1]} ]' result.txt)
          echo "::set-output name=comment_issue::$(echo $comment)"
      - uses: KeisukeYamashita/create-comment@v1
        with:
          comment: ${{ steps.comment.outputs.comment_issue }} 